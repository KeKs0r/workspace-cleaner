const fs = require('fs');
const Path = require('path');
const Async = require('async');
const moment = require('moment');
const getSize = require('get-folder-size');
const { ArchiveProjectProposal, compressionRatio } = require('./basic');
const modclean = require('modclean');
const rmdir = require('rmdir');
const _ = require('lodash');


function _ignoreNotFound(cb) {
    return (err, res) => {
        if (err && err.code !== 'ENOENT') {
            return cb(err);
        }
        cb(null, res);
    }
}

function _clean(infos) {
    const modules_size = (infos.modules_size) ? infos.modules_size : 0;
    return {
        modules_size,
    }
}

function analyze(projectPath, cb) {
    const modulesPath = Path.join(projectPath, 'node_modules');
    Async.auto({
        modules_size: (cb) => {
            getSize(modulesPath, _ignoreNotFound(cb));
        }
    }, (err, res) => {
        if (err) {
            return cb(err);
        }
        cb(null, _clean(res));
    })
}

function propose(project, cb) {
    if (project.modules_size > 0) {
        return [
            new OptimizeModulesProposal(project),
            new DeleteModulesProposal(project),
            new DeleteModulesAndArchiveProposal(project)
        ]
    }
    return [];
}


// ** Proposals ** //
class OptimizeModulesProposal {
    constructor(project) {
        this.project = project;
        const optimizeSavingRatio = 0.15;
        this.potential = project.modules_size * optimizeSavingRatio;
    }
    isRecommended(){
        const days_old = moment().diff(this.project.updated_at, 'days');
        return  days_old > 14;
    }
    execute(cb){
        optimizeModules(this.project.path, cb);
    }
    simulate(cb){
        optimizeModules(this.project.path, cb, true);
    }
}
OptimizeModulesProposal.prototype.key = 'optimize_modules';
OptimizeModulesProposal.prototype.label = 'Clean';


class DeleteModulesProposal {
    constructor(project) {
        this.project = project;
        this.potential = project.modules_size
    }
    isRecommended(){
        const months_old = moment().diff(this.project.updated_at, 'month');
        return this.project.modules_size > 0 && months_old > 2;
    }
    execute(cb){
        deleteModules(this.project.path, cb);
    }
    simulate(cb){
        deleteModules(this.project.path, cb, true);
    }
}
DeleteModulesProposal.prototype.key = 'delete_modules';
DeleteModulesProposal.prototype.label = 'Del M';


class DeleteModulesAndArchiveProposal {
    constructor(project) {
        this.project = project;
        this.deleteM = new DeleteModulesProposal(project);
        this.archiveP = new ArchiveProjectProposal(project);
        const savingRatio = 1 - compressionRatio;
        this.potential = Math.round(project.modules_size + ( (project.project_size - project.modules_size) * savingRatio ));
    }
    isRecommended(){
        const context = this;
        return this.deleteM.isRecommended() && this.archiveP.isRecommended();
    }
    execute(cb){
        Async.series([
            (cb) => this.deleteM.execute(cb),
            (cb) => this.archiveP.execute(cb)
        ], cb);
    }
    simulate(cb){
        Async.series([
            (cb) => this.deleteM.simulate(cb),
            (cb) => this.archiveP.simulate(cb)
        ], cb);
    }
}
DeleteModulesAndArchiveProposal.prototype.key = 'archive_project_without_modules';
DeleteModulesAndArchiveProposal.prototype.label = 'Zip + (d)';


function deleteModules(projectPath, cb, test){
    const modulePath = Path.join(projectPath, 'node_modules');
    if(test){
        console.log('Deleting'+ modulePath);
        return cb();
    }
    rmdir(modulePath, function(err, dirs, files){
        if(err){
            return cb(err);
        }
        cb(null,{
            files: _.size(files),
            dirs: _.size(dirs)
        });
    })
}

function optimizeModules(projectPath, cb, test){
    modclean({
        cwd: projectPath,
        test: test
    }, cb);
}

module.exports = {
    analyze,
    propose,
    DeleteModulesProposal,
    OptimizeModulesProposal,
    DeleteModulesAndArchiveProposal,
    optimizeModules,
    deleteModules
}